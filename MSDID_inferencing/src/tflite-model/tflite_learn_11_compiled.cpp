/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 08.05.2024 05:01:22

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 13296;
#else
constexpr int kTensorArenaSize = 12272;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,32,32,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 1024, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data2[5] = { -120, -8, 406, -100, -217, };
const TfArray<1, int> tensor_dimension2 = { 1, { 5 } };
const TfArray<1, float> quant2_scale = { 1, { 8.5164501797407866e-05, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[5*1024] = { 
  10, 11, -13, 14, -7, 11, 14, -17, 4, 16, -4, 0, -4, -13, 2, 4, 11, -2, 8, 14, 3, -9, 0, -13, -3, -11, -4, -4, 2, -14, -1, -7, 0, 5, -1, -3, 10, 0, 2, 21, 19, 15, -6, -11, 1, 10, -3, 7, 7, 4, 1, -26, -6, 21, -3, 7, 11, 13, -18, -16, -63, 2, 7, 4, -17, -13, -5, 8, -1, -5, -1, 22, 15, 10, -25, -8, -9, -5, -8, 1, -10, -16, -16, -12, 7, 0, -6, 23, 6, -9, 10, -15, 2, 7, -27, -5, 12, -4, 0, 7, 4, -13, -5, 1, -18, -10, 8, 6, -5, -7, -2, 1, -7, -4, 4, 11, -8, 4, 14, -8, -15, 8, 5, 1, -15, 11, -7, -16, -17, 2, -1, 9, -11, 1, 18, 13, 19, 6, -4, -26, 12, 12, 4, 6, -1, 12, -5, 1, -10, -8, 5, 2, -2, 6, -14, -19, -12, -4, 11, 14, -2, -11, 4, -9, 14, -7, -31, -2, -9, 1, 2, -2, -16, -27, -4, -3, -9, 10, -6, -6, -4, 11, -6, -14, -13, 3, -3, 5, -19, -127, -12, -16, 6, 3, 10, -7, -6, 6, -22, -8, -21, -6, 4, 21, -3, -19, 4, -34, 8, -8, 6, 24, 11, -13, 11, -5, -1, -22, 2, 6, -5, -40, 8, -12, -7, 7, -3, -8, -8, 11, 2, 8, -7, -2, -1, 3, 25, -14, 4, 29, -1, -7, -6, -45, -10, 3, -14, -14, 2, -8, 2, 16, -33, 5, -5, 7, 17, -10, 12, -25, -20, -21, 15, -29, 6, -17, -20, -1, -10, -17, -28, 7, -8, -20, 3, 11, -15, 12, -3, -4, 11, 9, -13, -22, 13, -6, -20, 10, 0, 8, -33, -10, 20, 1, 3, -10, 1, -11, 7, -17, -5, -1, -5, -14, 13, 4, 1, -5, 12, 2, 8, -5, -1, 4, -11, 7, -1, 2, 3, -13, -4, 7, -24, 9, -2, -8, 9, 2, -11, 12, -7, -26, 34, 22, 0, -9, -10, 7, -14, -2, -16, -2, -4, -2, -4, 6, 4, 3, 11, 3, -8, 17, -4, 1, 10, 13, 18, -16, 8, -12, 14, 1, 19, -15, 4, -16, -3, 12, -1, -8, 3, 3, -4, -2, 9, 3, -4, 0, 1, -14, -17, -24, 4, 7, -4, -9, -5, -6, 3, 14, -23, -37, -18, -3, 10, 24, 4, -20, -11, -13, 11, 23, 23, -20, 12, 5, 1, -18, -16, 6, 9, -2, 0, 5, 14, -23, -13, -12, -13, -18, 1, 20, -8, 12, 11, 4, -13, 13, -24, 0, 2, -16, -11, -7, -17, -14, -5, 1, -13, 8, -14, -18, -24, -24, 5, -16, 38, -4, -28, -17, -35, 15, -3, -23, 18, -13, 4, 0, -13, -31, 35, -4, -11, -40, 6, -4, 6, 2, -2, -15, 18, -10, 11, -9, -7, 6, 16, -23, -4, -11, 28, 37, 17, -9, 49, 30, 14, 12, -3, 28, 5, 41, 25, -13, 9, 23, 55, 31, 33, 27, 20, 14, 65, 5, 32, 9, 21, 12, 49, 4, 36, 40, -13, -17, -14, -23, -28, -16, -13, 9, 8, 7, -4, -6, -21, -16, -4, -19, -20, 10, -15, -6, -2, 11, 6, 15, -1, -1, 1, -14, -32, 16, -12, -43, -2, -8, -10, -3, -5, -16, -27, 11, -1, -6, 10, -4, -6, -23, -17, -10, -4, 0, 6, -9, -1, -5, -12, -7, -1, -21, -33, -18, -17, 24, 2, 2, -10, -29, -23, 28, -20, -24, -2, 20, 15, -26, -6, 7, -28, 32, -2, -25, -16, 11, -10, -8, -31, 0, 30, 18, 36, -33, -5, 8, 17, 1, -12, -41, 24, 21, -33, 19, 44, 17, 20, 13, 22, 8, 21, 30, 22, -10, 21, 21, 24, 10, 13, 20, 30, 37, 39, 30, 15, 46, 3, -13, 17, -15, 41, 28, -16, -47, 4, -2, 0, -10, -21, -14, -15, -19, -4, 16, -7, -15, -30, -28, -23, -30, -26, -6, -18, -36, -39, 13, 0, -68, -19, 20, -10, -10, -18, -26, -15, -39, -39, -11, -21, -34, -36, -11, -4, -34, -1, 15, -36, 12, -6, -29, 0, -9, -11, -20, -11, -10, -3, -35, 6, -24, -7, 15, -32, 66, 26, -20, -14, -3, -26, 17, 6, 6, 25, -7, 26, -17, -16, -5, -24, 62, 3, -20, -18, -2, -28, -13, 12, -11, -4, -8, -1, -1, -5, 24, 32, -6, 17, -2, -7, 24, 9, -2, 33, 11, 26, 24, 24, 8, 28, 11, -16, -22, 13, 19, -5, 5, -20, -4, -40, 11, 25, 26, 24, 31, -69, -79, -11, -20, -5, 54, 7, -18, -35, 16, -25, -17, -5, -11, 21, -14, -7, 2, 1, -7, 10, -12, -15, -58, -13, 4, 15, -20, -19, 12, 18, 11, 9, -8, 3, -20, -16, -13, 6, -29, -39, 26, -19, -4, 1, 2, 3, -21, 21, -8, -18, 7, -8, 4, -12, -22, -18, 7, -17, -9, 14, 21, 10, -41, -5, -1, -15, 3, 10, -11, 5, -29, -11, -8, -35, -25, 22, 16, 0, -26, -14, -1, 14, -9, 20, 5, -3, 14, 1, 3, 25, -14, -6, 18, 17, -16, 16, 32, -43, 17, -6, -19, 5, 13, 10, -15, -11, 1, 11, 30, 4, 38, -7, -12, 11, 17, -7, 13, -15, -23, 10, -48, -20, -28, -15, -40, -26, -2, -6, -14, -2, 19, 4, 5, 37, 1, -18, -11, -15, 12, -3, -25, -18, -11, -11, 22, 21, 3, 25, 24, 5, -9, 6, -17, 27, 14, 4, 0, 22, 11, 24, 6, 8, -23, 2, -16, 3, 15, -14, 16, 9, 22, -1, -6, 11, -7, 15, -15, -14, 6, -1, 1, 5, -11, -11, -9, -23, -9, 0, 8, -11, 16, -12, 13, -1, -1, -5, 21, -12, -8, 9, 2, -8, 8, -16, -10, -4, -34, -17, -8, -58, -15, -10, -4, 1, -13, -12, 1, 0, 5, -6, -9, -20, 3, -5, 4, -17, -13, -2, -13, 15, -27, -40, -6, 1, -25, -15, -11, -4, 7, 13, 24, -17, -22, -6, 15, -7, -2, 9, -22, 12, 7, -16, 4, -13, -13, 1, 1, -5, 6, -12, -9, 
  -1, 15, -4, 2, -7, 13, -7, 12, 10, 15, -1, -1, 9, 19, -1, -6, -8, 20, 11, 8, -1, -7, -5, 15, 8, 9, 5, -21, -6, -6, 8, 8, -19, -13, -19, -6, 8, -10, 6, -6, 8, 0, -10, -12, -7, 16, -7, -7, -23, -1, -16, 3, -4, 2, -26, 0, 3, 6, -14, 0, -2, 24, -25, -9, -17, -20, -3, -24, -16, 8, -13, 19, -13, 0, -21, -1, -12, 44, -41, 25, -16, -29, -16, -27, 5, 4, -10, 7, 4, -6, 3, -7, 23, 43, -41, -1, 0, -26, 0, -5, -3, 3, -22, 8, -15, -38, 6, 12, -48, -26, -3, -3, -8, -1, 4, 16, -3, 3, -22, 8, -26, 14, 0, 11, 6, -5, -20, -2, 1, -6, -7, -12, -19, -4, -2, 2, 12, -34, 21, 22, -18, 4, 5, -19, -12, -20, -10, -11, 13, 11, 14, 11, -24, -14, -18, 26, -14, 5, 2, 2, 10, -23, 18, -20, -15, -2, -28, -7, -7, -20, -7, 10, -3, -6, -17, -29, -18, -19, -6, 5, -2, 8, -18, 5, -14, -28, 1, 9, -32, -37, -12, -2, 5, 3, -9, -33, 13, 0, -30, -8, -15, -19, 8, 11, -39, -78, 6, -49, 9, 5, 3, -13, 14, 4, -5, 8, -9, 1, 11, 12, 5, -53, 14, -3, -2, -2, 8, -10, -6, -7, -2, -4, -1, 4, 9, 3, 28, -51, -6, -6, -14, -3, 12, 14, 9, 4, -14, 2, 10, -9, 11, 22, -38, -1, -10, 3, -7, -25, -19, -10, 14, -5, -3, -24, 12, 2, 2, -24, -4, -20, -12, 11, 2, 1, 21, -12, 31, -3, 16, -16, 8, 18, 5, -13, 11, -14, 29, 0, -6, -4, -4, -15, 5, -20, -2, -27, -1, 20, 7, 4, 32, 7, 18, -22, -17, 0, 20, -17, 30, 1, 10, -19, -2, 0, 8, 21, 10, -3, 0, -29, -7, -2, -29, -34, 9, 6, -16, 2, -2, -9, -3, 1, 19, 11, 1, -48, 11, -8, -20, 19, 6, -2, -13, 14, -1, -12, -10, -13, -20, -7, 2, -8, 23, 16, 17, 2, -13, -5, 9, -10, 15, 6, -6, 2, 4, -6, 14, 11, 12, -6, -8, 19, -6, -12, 24, 12, 11, 3, -1, -19, 15, 5, 8, 4, 19, -18, 25, -18, 2, -10, -8, -6, -10, -13, 6, 2, 11, -15, 4, 31, -13, -2, 17, 1, -18, -5, -13, 36, 1, 21, -10, 9, 22, -20, -2, -6, -24, -6, 12, -20, -8, 0, -15, 10, -1, -4, 20, 32, -18, -5, -40, -17, -45, -31, -18, -6, -21, -1, -37, 8, -2, -16, 2, 21, -21, 9, -39, -39, -28, -42, -6, -9, -14, -15, -9, 4, 3, -40, 6, -12, 18, -7, -40, -45, 26, -6, 27, -8, 2, 4, -8, -1, -25, 2, 5, -26, 1, -10, -44, 40, 12, 10, 42, 4, -39, -9, 4, -3, -16, 26, -19, -56, -23, -2, 0, 21, -31, -24, -19, -3, -9, -10, -34, -8, -11, 18, -2, -19, 8, -9, -15, -14, -12, -6, 4, 15, 15, -25, 1, 14, 1, 5, -20, -12, 20, -1, -16, -5, 21, -9, -14, -12, -2, -21, -20, -15, -9, 14, 15, 5, 27, -21, -2, 6, -12, 20, -11, -24, 8, -19, 7, -17, -8, -18, 6, 17, -40, -27, 5, -19, -18, -13, -2, -7, -28, 1, -2, -29, -8, -15, 7, 0, -19, 7, -4, 0, 15, 16, 10, 37, -4, -4, 7, -12, 22, 45, 12, -17, 86, -95, 9, 10, 32, 49, 37, -12, 12, 12, 17, -20, 6, 33, 23, -1, 4, -61, -8, 52, 36, -1, 28, -46, -57, -21, 26, -15, -27, 22, -41, -36, 6, -1, 19, 26, -30, -28, -7, 1, -42, -28, -37, -37, -33, -32, -6, -19, 5, -18, -30, -16, -46, 22, -9, -24, -46, -7, -1, 18, -10, -19, 6, -15, -15, -37, -37, 25, 8, 20, 16, -10, -17, 3, 6, -12, -6, 21, -7, -7, -13, 3, -15, 4, 9, 6, -18, 18, 3, 17, 3, -2, 23, 33, 18, -5, -6, 9, 4, 17, 12, 33, 13, 6, 13, 10, 15, -9, 13, -1, 8, -12, -2, -1, 11, 11, 32, 1, 11, -3, -4, -3, 35, -1, 16, 54, -32, -1, 51, 22, 10, 26, 8, 22, -3, 21, 19, 10, 6, 5, 29, 14, 20, 12, -29, -8, -2, 66, 31, 14, -1, -14, -25, 2, 9, -6, -24, 23, -4, -36, 12, 18, 24, 1, 3, -14, -18, -29, 6, -19, -15, -32, -1, -9, -22, -27, -21, 4, -8, -22, -7, -13, -15, 12, -6, -8, -27, -22, -6, -19, -10, 0, -3, -51, -14, -7, 1, 43, 45, -34, -27, -9, -5, -14, -18, 5, -1, 7, -14, -79, -2, 24, 29, 3, 67, -18, -5, 9, -20, 6, 0, 1, 16, -10, -24, -7, 31, 4, 5, 11, 42, -23, 19, 6, 24, -6, -11, 32, -5, 10, 24, -3, -15, -22, 7, -8, 1, -30, 6, 7, -1, 5, -18, 36, -11, -13, 43, 22, -7, 3, 11, 20, 22, 5, 20, 16, 6, 14, 7, -4, 7, -23, -8, -9, -4, 19, 1, -1, -4, -12, -5, -4, -6, 7, -2, 9, -9, 10, 27, 27, 2, -7, -10, -21, -12, -58, -13, -18, -33, -14, -38, -40, -17, 4, 26, -3, -38, -22, -11, -12, 14, 38, -19, -22, 24, 10, 3, 6, -1, -20, 5, 32, -11, -6, 31, 14, -34, 30, 38, 3, 12, 4, 7, 10, 23, 0, 5, -2, 24, 34, 21, 27, 49, -5, 7, 21, 50, 9, 3, 20, -8, 28, -4, -5, 45, 32, -8, 0, 46, -13, -2, -10, 9, -13, -8, 22, 9, 20, -1, 3, -10, -32, -11, -1, 24, -4, 1, 9, -9, -4, 0, -12, 9, 15, 28, -13, -2, -25, 9, 0, 8, 13, 10, -6, 4, 8, -5, 4, 1, 21, 8, 1, -6, -2, 23, 16, 5, 1, 25, 7, -20, -8, -4, -19, 2, 17, 6, -41, 22, 9, -14, -8, 0, -50, -6, -3, -12, -44, -15, -3, 20, 22, 22, -24, -5, -6, 
  -15, -8, -3, -13, -15, 14, 16, -14, 3, 0, 3, 1, 8, 9, -18, 1, 7, -10, 1, 6, -9, 15, -15, 23, 3, -13, 1, -4, 6, 7, -13, 1, -7, -20, -2, 4, 2, -8, 1, 20, 6, 9, -6, -4, -1, 25, -14, 17, -8, -6, 13, 2, 1, 14, -17, -6, 16, -6, 2, 9, -10, -82, -6, 9, 8, 15, 12, 17, -1, -13, 3, 0, 4, -17, -4, 3, -8, -81, 2, -2, 6, 13, 1, 12, 11, 8, -6, -20, 0, -3, 18, 3, -20, -63, 20, -5, 15, 10, 3, 5, -3, 5, 2, 9, 39, 27, -7, 5, -19, 2, 8, 0, 0, 11, 8, 64, 5, 9, 11, 34, 32, 18, 18, 10, -14, -39, 29, 6, -21, -16, 5, -2, 19, 1, -9, 1, 6, -4, -10, 9, 4, 9, -12, -5, 0, 4, 20, 2, 7, -11, 5, 16, -6, 9, 1, 13, 5, -5, -28, 17, 13, -12, -3, -8, 0, -5, -11, -16, -7, -3, 0, -15, -13, -9, -13, -23, 15, 18, -10, -4, -3, -2, -10, 3, -9, 13, 7, 6, -13, 23, -15, 13, 9, -4, 15, -3, -1, -3, 14, -5, 6, 19, -5, 7, -6, 46, 14, 3, 6, -10, 4, -33, -11, -1, 4, 30, -10, -6, -6, 5, 32, 39, 6, 0, 4, 2, 0, 13, -5, 15, -9, -1, -6, -11, -16, -5, -45, -1, -3, 7, -6, 0, 8, 0, 6, 12, 2, 12, 21, 16, -12, -19, 8, 11, -6, -5, -18, 3, -39, 3, -10, -27, -4, 5, 10, 6, 5, -20, -7, 28, 33, -19, -8, -32, -18, 1, -12, -16, 28, -14, 22, 6, 8, 14, 23, -16, 7, 10, 7, -25, -24, -4, 1, -19, -6, 2, -6, 2, -9, 10, 2, 33, -15, 20, -3, 5, -19, 12, 13, -15, 10, 2, -4, 0, 1, 3, -9, 12, -11, -7, -2, 3, -23, 0, -3, 12, -8, -3, -6, 7, -9, 25, -11, 3, 0, -22, -11, 0, -8, -6, 25, 2, -9, 2, -9, 7, 15, 61, -2, 14, 0, -30, 3, -9, -16, -29, 2, -8, 3, -14, 5, 2, -20, 32, -6, 1, 13, -3, 9, 5, -1, 2, -4, -5, 7, -8, -1, 10, 10, -10, 16, -21, 5, -5, 2, 1, 0, 19, -13, -33, 13, 8, -10, -21, -19, -44, -12, 40, -4, 20, 1, -40, -61, 23, -19, -8, 17, -6, -2, 14, -20, -48, 20, 6, 16, -1, -35, 7, -57, 26, -13, -13, 24, -1, 14, -5, -33, -37, 44, 17, -18, 18, -8, -11, -9, 34, -29, -27, -8, 9, 28, -18, -1, -24, -47, -12, -4, 19, -24, -10, -32, 10, 11, 4, -41, -1, 2, -24, 6, -5, -28, -8, -13, -7, 8, -8, -13, 0, -4, -3, 25, 6, 20, 18, 11, 0, 11, -3, 11, -53, -39, -31, -49, -15, -51, 8, -10, -11, -11, -8, 0, -16, 18, 0, 3, -10, -22, -12, -14, -19, -11, 4, -38, -2, -8, -6, -13, -25, -31, -8, -23, -35, 4, 15, 42, -4, 13, 0, 44, -12, -9, 8, -21, 20, -9, 30, 54, -1, -19, -40, 13, 16, -22, 14, 7, 2, -22, -8, -35, 20, 9, 42, -30, 29, 33, 10, 22, 20, 2, 20, 2, 5, 10, -4, -22, 6, 13, 19, -39, 34, 10, -8, -6, 22, -36, 28, 11, 8, 7, 0, -10, -7, 27, -37, -22, 26, -31, -27, -10, -46, 4, 8, -13, 6, -5, -54, 6, 19, -111, 15, -33, -20, 2, -30, 9, -1, -37, 7, -25, 3, -18, -9, -19, 8, -10, 11, -31, -41, -28, -33, 2, 0, 11, 27, -16, 16, -6, -10, 18, -5, -35, -21, -17, -3, -2, -17, -1, 4, -44, -32, 10, -8, -25, -19, -48, -41, 24, 7, -17, -11, 21, 1, -19, 12, -3, 1, -18, 13, 3, -7, 23, 18, 7, 18, 29, -16, 1, -6, 47, 21, 44, 15, 0, 7, 15, -1, 20, 8, 10, 22, -2, -25, 2, 13, 49, 5, 16, 21, 11, 31, 11, 45, -2, -5, 36, -6, 6, -27, -10, -20, -12, -10, -12, 17, -48, -13, -15, 7, 2, 2, 41, -8, -25, -8, -4, 1, 7, -25, 19, 11, -30, -13, -18, -28, 26, 16, -56, -48, -12, 3, -6, -10, 10, -38, -16, 17, -39, -42, -44, 6, -8, -18, -11, -8, -11, -52, -5, -24, 11, -33, 3, -9, -42, -46, -14, -32, -26, 4, -20, -42, -30, -25, 16, -23, -1, 0, -9, 0, -17, -10, -28, 1, 17, 11, 14, -17, 3, -18, 14, -24, 4, 6, -25, -6, 2, -15, 4, 22, 20, -12, 13, 29, 28, 7, -15, -16, -28, 9, 32, 22, 12, 19, 10, -6, -5, -16, 0, 29, 24, -14, -10, 14, -38, 17, 3, -5, -2, 7, 13, 8, -30, 1, 37, -28, 26, -1, 29, -4, -4, 16, 5, 20, 6, -35, 2, -11, 0, 0, -22, -59, -5, 24, 13, 16, 0, 24, 11, 17, 25, -13, 15, 18, 9, -10, -9, -20, 7, 27, -6, -11, -5, -3, -1, 20, -6, -8, -28, 10, 12, -6, 11, -46, 11, 8, 2, -23, -6, -35, 22, -3, -24, -14, -31, 8, 16, 10, -20, -42, -3, -7, -2, -11, 2, -34, 7, -2, -19, -7, -2, 1, -6, -5, -74, -10, -19, -3, 3, 6, 15, -13, -19, -13, -5, -16, -14, -13, 17, -24, 6, 14, -16, 7, -46, 4, 1, -2, -46, 16, 8, 34, 8, -6, -21, -36, 15, 0, -30, -46, -18, -37, -50, 18, -12, 22, -25, 2, -5, -16, -15, 1, 7, 14, -20, -22, -10, -3, -27, -4, 13, 10, -23, -8, -5, 20, 5, -21, 9, -33, -4, -16, -3, 19, 29, -9, 3, 4, -7, 27, 5, 26, 11, -9, -10, -12, -13, -1, 25, 4, 5, -21, 10, 4, -9, -5, 10, -16, 2, 39, -5, -20, 11, -18, 29, -3, -27, 5, 26, -8, -3, -14, -6, -34, 49, 24, -8, -31, 15, -23, 16, 8, -7, -18, 13, 16, 3, -8, -7, -17, 17, -6, 12, -37, -2, -4, 
  10, 7, -3, 5, -15, -7, 5, -5, 5, -12, -9, 8, 10, 32, -4, 19, 12, -21, -18, -29, -13, 0, -3, -6, -28, -1, -7, 22, -16, 27, -15, 4, -8, 28, 23, -16, 12, -21, -2, -25, -14, -9, 12, 2, -10, -60, 39, -34, -15, 27, 8, 6, -3, -3, 12, -11, -9, -5, -6, 24, 47, 25, 15, -20, 6, 13, 4, -2, 7, 0, 12, 2, 0, -7, -2, 4, -24, 5, 21, 13, 6, 22, 0, -5, 2, -6, -5, -7, 25, 2, -15, -13, -12, 12, 11, 19, -3, 4, 5, -1, -2, 4, 7, -6, 1, 4, -11, 6, 26, 35, 1, 14, 7, 0, 1, -7, -9, 1, 18, 7, 19, -2, -5, -13, -9, -21, 13, 6, 2, 8, 7, 3, 9, 10, -21, 3, -9, 11, -3, 33, 8, -4, -9, 6, 34, -4, 18, -7, -7, -2, 8, 4, -6, 5, 19, -9, -11, 7, 27, 12, 6, 4, 15, -2, -18, 4, 37, -1, 2, 10, -5, -10, 7, 20, 11, 1, -14, -15, -11, -5, 6, -10, 24, 18, -4, 4, 0, 18, 25, 58, -3, 16, -7, 7, 20, -5, 14, 17, -28, 17, -3, -12, 1, -14, -16, 13, -3, 11, 1, -11, -5, 5, 4, 10, 11, -3, -3, 9, -5, -10, -40, -14, 9, -15, -11, 6, 7, -3, 7, -4, 0, 2, 2, -17, -7, -14, -2, -2, -6, -2, 1, -5, 6, -15, -6, 15, -13, -13, -8, 18, -7, -31, 35, 3, 1, 20, -7, 5, 41, 14, 24, 44, -17, 35, -2, -9, 20, 18, -5, -2, 12, -8, -5, 6, 17, -3, 12, 22, -24, 10, -23, 9, -6, 23, -18, 2, -12, 10, 33, 23, 33, -5, -2, -8, 16, -10, -3, -22, -9, 11, -24, -9, 2, 2, 6, -9, -11, -9, 2, -3, 6, 4, -15, 14, 7, 2, 10, 26, 3, -26, 10, 5, -11, -7, 29, 12, 0, 4, 10, -5, 18, -10, -8, -6, 6, -3, 10, 2, -10, 14, -9, 8, 1, 0, -6, 3, -12, -44, 27, -2, 11, -11, -23, -2, -4, 11, 5, -9, -4, -5, 0, 1, -3, -11, 31, -2, 2, -14, -2, 0, 3, -1, 7, -21, -23, -14, -3, 5, 10, 19, 2, 17, -4, 7, -36, 12, -20, -30, -1, 16, -8, 24, -18, 16, 24, 40, -9, -32, -8, -24, -4, 0, 17, -17, 23, 13, -22, -2, 0, -33, 40, 15, -25, -11, 10, -23, 10, 3, 16, -6, -9, 9, -20, 26, -10, -4, -6, 30, 3, -27, -5, 2, 5, -11, 18, -58, 7, -2, -29, 10, -4, -13, 19, 8, -56, 21, -26, -17, -8, -15, -5, -27, -8, -1, -5, -2, 9, 1, -14, 14, -31, 34, 11, -71, -20, -21, -44, -15, -14, -20, -7, -2, -7, 6, -24, 17, -8, -3, -9, -64, -11, -26, -27, 0, -29, -25, -2, -10, -3, -2, -5, -7, 2, 5, -2, -21, -18, -10, -2, 16, -5, -9, -23, -3, -2, 13, 15, 19, -16, -8, -24, -26, -11, -15, -54, -1, 12, 0, -10, -24, -14, -18, 58, -3, -17, -23, -35, -33, 19, 40, 21, -7, 44, 21, 7, -16, -4, -4, 46, -3, 4, -16, 34, -22, -6, 14, -6, 10, 10, -3, -3, -2, 4, 27, 26, 0, 27, 8, 20, -17, 2, -19, -9, -10, 40, 1, -29, -40, -19, -21, 3, 25, -50, -13, -9, -2, 18, 13, -16, -27, -18, -6, -13, 16, -26, -36, -21, 7, -28, 30, 6, -20, -33, -18, -29, 1, -12, -25, -11, -10, -14, -12, -13, 8, 14, 11, -33, -60, -69, -35, -15, -6, -19, -21, -38, -12, -26, -38, -20, 12, 13, 28, -70, -67, -33, 13, 27, -21, 27, -10, -54, 16, -13, -34, 36, 62, -31, 32, -17, -13, 13, -8, 30, -6, 8, 32, -7, 3, 2, 16, 23, -5, -4, -19, 8, 7, 31, 45, 24, -11, -17, -12, 0, 2, -2, 54, -19, -10, 8, -31, -9, 13, -21, -21, -40, 8, 9, 15, -22, 8, 29, -27, 13, 2, -28, 25, -17, 7, -1, 17, -10, 9, -9, 10, -10, -6, 1, -20, -8, -7, -48, -8, -13, -6, -19, 2, -14, 53, -27, 8, 17, 0, 7, -28, -26, -17, 12, 35, 1, 16, -8, -23, -10, 43, -32, -9, 18, -12, 7, -26, -36, -9, 22, 10, -36, -21, -30, -55, -52, 39, -14, 2, -17, 16, 5, -27, 6, 8, 25, 62, -18, -10, -10, 31, 9, 15, 38, 7, 11, 25, 16, 10, 74, 57, 13, 34, 29, -21, 1, -9, 12, -30, 5, 0, -26, 2, 0, -3, 4, -18, -23, -14, -5, 9, 5, -7, 25, -14, -29, -12, -21, 5, -10, -13, -20, -21, -9, -2, -14, 5, -32, -19, -7, 11, -5, -5, -4, 5, 30, -28, -1, -8, -31, 21, -33, -30, -42, -26, -7, -9, -27, -1, -18, 37, -8, -20, -19, -21, -45, 20, -42, -20, -27, -21, 4, 25, -13, 8, -38, 3, -27, -5, -20, -37, -24, 25, -29, -8, -45, -23, -24, 36, -52, -39, -8, -2, -1, 17, -25, 8, 34, 65, 3, -9, 3, 26, -13, 61, -1, -11, 5, 14, 38, -30, 18, -9, 16, 45, 8, -8, 19, 36, -8, 111, 30, 32, 53, 54, 42, 44, 27, -9, 60, 33, 34, 45, -6, -5, -17, -5, 36, 25, 0, 18, -11, -1, 0, 8, 16, -34, 27, -18, -14, -9, 31, -13, -17, 7, 8, -3, -14, -17, -14, 11, -9, -11, -17, -23, 9, -14, 3, -16, -7, -1, -44, 2, -15, -20, 14, 12, -2, -36, -31, -34, -9, -13, -9, 8, -31, -8, 3, -8, 7, -35, -16, 7, -28, -10, -29, 1, 14, -24, -21, 15, -42, -20, -8, 0, -12, -18, -12, -25, 11, -2, -23, -1, 11, 12, -24, 11, 6, 3, 31, -8, 20, 11, -4, 20, -9, 17, -10, 55, 16, 39, 22, 22, -12, 15, 36, 40, 27, 18, -29, 2, 18, 46, 7, 52, 11, 26, 5, 14, -21, 9, 9, 17, 18, 8, -3, 27, -16, 41, -2, 38, 
  12, -16, -23, 2, -19, -1, -4, -5, 2, 1, 11, 8, -7, -19, -22, 10, -15, -2, -8, 4, 13, 11, -17, 4, -7, -1, 20, 0, -2, -37, -12, -14, 6, -4, 10, 0, -4, -12, 18, 10, -9, -6, 11, 9, -16, 8, 27, -33, 0, -5, -13, 2, -3, 9, 5, 17, -4, -25, 18, 22, -9, 17, 15, -37, 3, -7, 7, -31, 15, 4, -6, -4, 12, -16, -1, -2, 4, 7, 14, -46, 12, -13, 5, 2, -5, -12, 0, 10, 16, 7, -5, -16, 22, -32, 10, -20, 1, 20, -4, 13, -7, -11, 9, 2, -27, 15, 0, 3, 32, -5, -7, -3, -17, 1, 5, -57, -4, 7, -6, 6, -17, -19, -3, -9, 8, 19, -12, -15, 14, 5, 10, -6, 10, 5, -9, -7, 4, 1, -11, 8, -3, 11, -15, 5, -7, 1, 4, 3, 3, 14, 10, 16, 1, 2, 4, -8, -10, -9, -7, -22, -3, -16, -15, -6, 30, 2, 11, -27, 7, -9, 3, -4, -3, 6, 6, -11, -11, 19, -16, -14, -16, -2, 23, -21, 1, 13, -10, 1, 0, 0, 14, -6, 3, 3, -17, 31, -9, 5, 7, 4, 12, 15, -18, -12, 30, -6, -6, 23, 8, 0, -3, 16, 6, 12, 0, -18, -5, 5, 0, -10, -13, 29, 12, 23, -4, 8, -13, 15, -2, -6, -7, 0, -5, -16, -20, -10, -7, 40, -8, -1, -13, -1, -2, 7, -5, 3, 5, 3, 13, 2, -2, -2, -5, 17, -7, 6, -2, -5, 8, -1, 18, 7, 2, 19, -25, -16, -4, -9, -11, -19, 10, 5, -6, -6, -10, -20, -24, 13, 2, 11, -5, -12, 5, -7, -3, -3, 17, 17, -10, 3, 16, -3, -33, 12, 4, 41, 7, 1, -27, -35, -3, -39, -21, 17, 14, -6, 26, 3, -15, -1, 2, -1, -4, 13, -21, -32, 7, -51, -14, 49, 11, -7, 39, 19, -5, -1, 2, -10, -6, 3, 4, -8, -30, -43, -9, 63, 14, 3, 35, 2, -2, 10, 8, 6, -8, -2, -20, -29, -1, 5, 0, -12, -9, 7, 0, 13, -16, -12, -12, -6, 6, -9, -17, -16, 12, 0, -6, -3, -14, -5, -8, 3, -19, -7, -23, -7, 5, -10, 11, 2, -9, -4, -14, -13, -8, 15, -1, 24, 5, 19, 9, 1, 13, 11, -7, 0, 10, -4, 8, -2, -13, 2, 22, 2, 11, 10, -6, -23, -13, -21, -3, -2, -21, -14, -7, -1, 37, -30, 34, -21, -12, -15, -12, -18, -12, 38, 4, -11, -6, -17, 11, 16, 27, 24, 44, 21, 63, 11, 47, -31, 2, 46, 2, -18, 79, -27, 32, 40, 19, 48, 48, 3, 36, 26, 24, 6, 10, 58, -4, 18, 9, -15, 33, 76, 10, 2, -1, 2, 15, 4, -7, -11, -7, 9, 22, 9, -11, 17, 17, 16, 8, -5, -14, 2, 21, -16, 0, 10, 2, -7, 3, 13, -40, 24, 16, -21, -14, -11, -2, 1, -13, -8, -7, -24, 1, -20, 2, 24, 14, -23, -15, -39, 0, 4, -5, 7, 16, -5, -12, 12, 3, -28, 16, 13, 2, 18, -17, 20, 2, 10, -24, -6, 1, 12, -6, 18, -18, -19, -2, 5, -14, -16, -7, 19, -10, 11, -13, -19, -7, 5, 19, -20, -22, 10, 4, -6, 25, -12, 5, 3, 22, 16, 19, -8, 18, 13, 8, 10, 11, 27, 15, 13, 16, -14, 14, 10, 24, 20, 10, 6, 32, 22, 1, 13, -2, 45, 22, 6, 4, 8, 19, 9, -2, -3, -17, 26, 29, 20, -2, 16, -16, 23, 10, -19, -14, 18, 18, 4, 3, 8, 4, 7, -1, 1, -10, -15, 9, 25, -13, -39, 0, -14, -11, -7, -23, -14, -21, -14, -9, 13, -39, -21, -13, -26, 14, -42, -36, -29, -21, 2, 30, 13, 4, -4, 5, -4, 50, -11, -4, 4, -36, -33, 15, 22, 19, 16, -16, 0, -39, 8, 8, -8, -1, 2, -6, -14, -1, 2, -24, 3, 7, -8, -11, 6, -4, 0, 10, -12, 8, -9, -22, -12, -9, -8, 29, -57, -16, 14, -3, -5, -5, -4, -6, 13, -3, 15, -11, 21, 9, 12, 29, -54, 13, -5, -17, -7, 6, -26, 37, 5, -17, 3, -36, 7, 15, 41, -21, -60, -8, -16, 1, 2, 23, -22, 18, 18, 5, 15, 6, 24, -8, -15, -7, 23, 12, -29, 6, -17, -14, 8, -39, -20, -22, 7, -11, -9, -6, -15, -18, 11, -32, 2, -9, -14, -13, -42, -40, -29, -26, -32, -11, -9, -3, -14, 3, -17, -36, -4, 15, 31, 19, -7, 23, 22, 2, 1, -19, -1, -30, 4, 1, 20, -4, 19, 13, -9, -27, -11, -41, -8, 3, -7, -21, 2, 11, 26, -6, -16, -15, 22, -1, -10, 4, 4, -7, 0, -19, -10, -5, 34, -14, 9, 42, 9, -39, -11, -8, 8, 17, -2, -1, -21, -25, -12, -11, 14, 16, 3, 19, 1, -6, 18, 28, -2, 3, -29, 35, 25, 15, -14, 5, -10, 14, 15, -21, -43, 11, -21, 3, -11, 17, -64, 12, 18, -12, 8, -29, 9, 9, -12, 20, -29, 16, -25, -3, -24, 14, -23, -11, -17, -16, -29, -20, -3, -13, -1, -33, -39, -2, 16, -3, -1, -18, -87, -8, -9, -30, -49, -43, -31, -22, -6, -16, -13, -13, -9, 1, 0, -4, -2, -6, -9, 1, 18, -15, 11, 1, 19, -4, -14, -6, -18, -8, 11, 17, 3, 1, -14, -17, -31, -8, -1, 11, 0, -22, -9, -19, -11, -19, -12, 4, -1, -6, -10, -13, -8, -12, 5, -3, -18, 9, 24, 1, -34, 5, 27, -11, 6, 18, 4, 34, 14, 12, 1, -4, -8, 0, -3, 15, 10, 22, 7, 13, 0, 17, 28, 3, 23, 4, 30, 21, 2, 22, 3, 17, 7, -19, 21, 44, -25, 1, -9, 4, 1, 4, 22, 6, -92, 5, 4, 16, -2, -86, -14, 13, -9, -80, -4, -12, -21, -30, -5, -37, -92, -58, 28, -29, -16, -26, -14, -7, 39, -3, -29, -28, 1, -1, 8, -18, -56, -6, 20, -11, -39, 
};
const TfArray<2, int> tensor_dimension3 = { 2, { 5,1024 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0045943297445774078, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[16] = { -1332, -1935, -1235, -52, -1410, -1771, -1678, -1881, -951, -1642, -1502, -836, -739, 973, -2263, -1169, };
const TfArray<1, int> tensor_dimension4 = { 1, { 16 } };
const TfArray<16, float> quant4_scale = { 16, { 6.5195024944841862e-05, 5.8828252804232761e-05, 6.6492248151917011e-05, 6.9709196395706385e-05, 6.4660111092962325e-05, 4.3621297663776204e-05, 5.3041880164528266e-05, 7.7824421168770641e-05, 5.4518317483598366e-05, 6.7258348281029612e-05, 4.9850877985591069e-05, 6.10636270721443e-05, 6.5679385443218052e-05, 6.5937325416598469e-05, 5.0578197260620072e-05, 6.8064000515732914e-05, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[16*3*3*8] = { 
  /* [0][0][][] */ 11,32,83,14,-48,-21,-29,23, -19,59,33,-25,-37,31,77,-3, 36,55,33,20,-61,-13,103,63, 
  /* [0][1][][] */ 17,80,71,29,-16,-33,0,-51, -30,63,78,-12,-54,22,29,-56, -28,66,88,28,82,43,28,9, 
  /* [0][2][][] */ -45,127,-5,-20,-55,53,11,-38, 37,40,44,-55,-78,20,3,-55, -1,46,51,-27,-40,-24,30,-22, 
  /* [1][0][][] */ -46,36,50,14,-63,-71,-76,-4, -110,64,18,45,43,63,-11,106, 65,71,82,-76,-12,33,44,15, 
  /* [1][1][][] */ 51,68,119,-36,-69,-55,47,-6, -25,127,114,28,13,70,23,-20, 51,59,38,-75,-31,88,-11,-4, 
  /* [1][2][][] */ -22,0,120,-57,93,54,1,-39, -38,18,54,-24,73,57,34,-2, -47,12,77,-17,2,4,-40,-94, 
  /* [2][0][][] */ 54,-6,-14,-6,-37,-42,83,21, 59,59,67,32,-16,-48,-36,42, 5,93,63,-53,-22,48,96,8, 
  /* [2][1][][] */ 49,28,-16,10,-80,-18,33,38, -34,127,14,-23,-4,51,-37,-56, 5,-53,37,3,-26,17,48,-23, 
  /* [2][2][][] */ 4,108,40,15,-57,44,-124,-40, -36,113,86,25,30,71,38,9, 5,-84,-6,-3,-87,-77,-41,-48, 
  /* [3][0][][] */ -13,-38,47,-18,64,-14,-58,80, -44,-32,-4,31,22,-7,-6,48, -50,46,-21,-18,38,5,68,52, 
  /* [3][1][][] */ 54,-13,41,-28,-5,-39,-17,10, 52,-33,-19,-26,-4,9,61,93, -3,83,81,26,-10,7,95,79, 
  /* [3][2][][] */ 49,29,44,-49,26,-1,62,-31, -2,-34,4,-24,2,-56,21,84, 22,27,87,-53,49,6,127,74, 
  /* [4][0][][] */ -41,-127,-53,-13,-96,-122,-30,13, -34,19,-11,12,-53,50,-32,-41, 2,122,97,-13,-56,113,-23,-10, 
  /* [4][1][][] */ -53,-75,-37,12,-28,-43,-28,-30, -47,77,-10,8,-43,68,-87,2, 8,68,40,6,5,58,80,-51, 
  /* [4][2][][] */ -47,-35,-45,15,-13,-60,-45,-75, -56,36,-33,22,45,25,-55,37, -25,74,-28,-40,121,38,34,42, 
  /* [5][0][][] */ -61,75,50,35,-67,-111,-70,85, -80,45,5,-46,57,48,-83,33, -49,103,88,-12,47,36,4,93, 
  /* [5][1][][] */ -44,89,6,-34,9,6,-45,-62, -68,27,30,35,16,40,40,83, 48,97,46,10,-127,77,8,-53, 
  /* [5][2][][] */ -65,9,-63,-6,-112,71,-45,-35, -73,-37,-92,23,16,-63,-25,-34, 82,26,-37,-4,-49,57,26,-104, 
  /* [6][0][][] */ 25,47,48,45,-101,-46,-16,12, -50,12,87,-57,-43,8,1,57, -41,-12,-23,34,-4,49,22,-20, 
  /* [6][1][][] */ -28,78,127,-24,1,60,-21,-4, 69,47,39,-86,82,78,89,72, -6,70,77,-47,55,37,118,127, 
  /* [6][2][][] */ 54,73,109,-80,-10,77,31,-46, 77,-35,-12,-69,40,16,56,87, -69,-65,62,64,-81,-62,21,7, 
  /* [7][0][][] */ -31,31,13,-47,15,46,4,31, 2,54,64,28,110,51,-4,54, 9,17,-18,-33,98,44,127,40, 
  /* [7][1][][] */ 4,20,2,-66,24,-33,9,10, -39,13,2,15,-5,35,47,36, -101,-28,-29,-6,-46,-48,-16,7, 
  /* [7][2][][] */ 14,-77,-8,8,-16,-46,12,32, -52,-15,-2,25,21,5,-18,4, -64,-16,-11,9,-61,-19,9,-6, 
  /* [8][0][][] */ 5,-48,77,24,6,-67,-75,15, -82,-1,27,19,92,9,-123,93, 10,-34,70,20,54,53,35,15, 
  /* [8][1][][] */ 40,17,127,-3,-17,-56,-9,-57, 2,61,83,-19,46,47,-19,33, -54,-21,3,-2,50,44,76,52, 
  /* [8][2][][] */ -14,-45,64,-47,67,60,93,-41, 33,-50,89,-54,35,-42,37,33, 17,1,-70,5,-43,-55,77,-52, 
  /* [9][0][][] */ 3,91,50,44,-49,72,11,8, 43,4,43,-62,-29,40,17,21, 32,21,17,56,-41,3,3,90, 
  /* [9][1][][] */ -27,127,-13,-63,-23,89,55,14, 27,-122,58,-43,-25,-33,40,-3, -38,68,61,29,-18,50,3,-9, 
  /* [9][2][][] */ -32,56,-12,-45,-18,16,38,-17, 6,-64,0,15,-81,-42,-69,36, -25,18,-16,6,48,54,-10,-51, 
  /* [10][0][][] */ -53,-127,-84,20,-12,-84,53,43, -87,-78,-26,19,-71,-53,-57,14, -127,83,-48,78,-109,74,8,48, 
  /* [10][1][][] */ -53,-30,-48,40,-17,-54,-18,53, -28,-39,37,-6,-17,-48,29,68, -73,86,-97,1,28,67,-71,-72, 
  /* [10][2][][] */ -30,-32,-34,29,23,-104,-58,-7, -125,103,85,25,42,93,-97,2, -108,11,-58,-25,0,-8,37,-90, 
  /* [11][0][][] */ -30,-30,-47,15,47,-33,8,-12, -24,-95,-12,4,42,-82,19,11, -21,-37,-77,36,-77,-56,-4,-39, 
  /* [11][1][][] */ 55,-28,-5,-36,-63,-114,15,-109, -53,-34,-68,28,-123,-78,-58,-98, -42,-2,-47,26,-127,-19,37,-78, 
  /* [11][2][][] */ -45,-65,26,72,82,-30,-56,4, -1,-5,39,42,15,-1,-24,-4, -82,32,-23,97,6,52,53,42, 
  /* [12][0][][] */ -127,73,-75,58,-20,41,38,-50, 44,26,-34,-55,-57,61,16,-67, 28,-6,26,36,-3,-102,-65,95, 
  /* [12][1][][] */ -82,17,-18,-41,42,71,33,2, 97,-70,-18,-35,20,-39,73,5, -32,10,76,32,-6,-62,-34,89, 
  /* [12][2][][] */ 27,-41,-55,-90,11,19,33,-12, 33,-65,44,39,-10,-66,30,-3, 64,41,124,50,58,-13,-24,4, 
  /* [13][0][][] */ 38,3,11,-10,-21,63,-23,-10, 50,2,-8,15,-19,-38,-62,-56, 28,4,89,16,84,-27,-30,36, 
  /* [13][1][][] */ -10,-37,5,-55,81,-15,-13,11, -48,-35,-86,-54,21,57,52,61, -58,-127,15,-61,87,0,47,65, 
  /* [13][2][][] */ 34,33,-29,81,-100,-11,-86,-98, 32,24,15,47,7,-37,-67,-68, -32,56,5,-1,-11,-15,-88,-18, 
  /* [14][0][][] */ -7,87,72,-14,-104,67,-33,-104, -13,51,127,31,-85,6,38,-32, -24,10,44,88,-9,-4,-30,-75, 
  /* [14][1][][] */ 12,61,34,-38,-66,108,-25,-63, 48,105,110,33,70,40,44,13, -82,93,7,-59,47,75,-17,24, 
  /* [14][2][][] */ 4,87,48,-90,48,114,-9,-93, -17,-55,-13,-70,101,-35,55,11, -46,40,-9,-70,2,24,20,-15, 
  /* [15][0][][] */ 28,78,25,-30,13,-28,-6,61, -5,35,71,-8,7,-36,8,71, -30,18,74,-34,-62,7,50,33, 
  /* [15][1][][] */ 63,52,80,-39,0,45,48,55, 17,39,109,21,-48,43,39,127, 52,61,111,-47,24,66,0,-1, 
  /* [15][2][][] */ 21,23,37,-50,-48,-66,101,94, -9,39,105,46,-22,-18,-14,63, 60,56,108,-58,-69,39,24,60, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant5_scale = { 16, { 0.0035463715903460979, 0.0032000425271689892, 0.0036169360391795635, 0.0037919261958450079, 0.0035172745119780302, 0.0023728394880890846, 0.0028852848336100578, 0.0042333649471402168, 0.0029655976686626673, 0.0036586087662726641, 0.0027117060963064432, 0.0033216387964785099, 0.0035727191716432571, 0.0035867500118911266, 0.0027512696105986834, 0.0037024333141744137, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[8] = { 18767, -5879, -4924, -727, -2263, -12777, 238, -4110, };
const TfArray<1, int> tensor_dimension6 = { 1, { 8 } };
const TfArray<8, float> quant6_scale = { 8, { 1.0114288670592941e-05, 1.3674938600161113e-05, 1.0651826414687093e-05, 1.5338426237576641e-05, 1.6803080143290572e-05, 1.3030797163082752e-05, 1.2551559848361649e-05, 1.2348640666459687e-05, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[8*3*3*3] = { 
  /* [0][0][][] */ 59,110,54, -10,-127,-71, 70,-39,-89, 
  /* [0][1][][] */ 6,59,-58, 83,-74,-99, 43,-13,-57, 
  /* [0][2][][] */ -20,-72,51, 13,63,77, 61,-2,-9, 
  /* [1][0][][] */ -37,-43,-11, 112,-29,80, -53,59,-17, 
  /* [1][1][][] */ 37,-6,-39, 116,-15,91, -3,-95,-63, 
  /* [1][2][][] */ 127,92,44, 1,39,17, -28,-90,-106, 
  /* [2][0][][] */ 104,100,-86, 22,-70,-107, 123,80,-58, 
  /* [2][1][][] */ 66,45,-98, 94,-81,-91, 117,67,-89, 
  /* [2][2][][] */ 127,43,60, 31,-8,-38, 57,-70,-106, 
  /* [3][0][][] */ -82,-21,-10, -69,58,-24, 70,24,79, 
  /* [3][1][][] */ -59,2,-30, 5,37,44, 40,100,64, 
  /* [3][2][][] */ 68,37,69, 111,100,116, 99,116,127, 
  /* [4][0][][] */ 117,12,24, 127,5,40, 63,80,17, 
  /* [4][1][][] */ 58,-18,50, 77,55,-7, 93,-6,-17, 
  /* [4][2][][] */ -61,-77,-77, -82,-80,-55, -80,-44,-49, 
  /* [5][0][][] */ 45,60,26, 110,87,48, -44,-12,-28, 
  /* [5][1][][] */ 127,16,87, 71,73,-8, -26,-106,-22, 
  /* [5][2][][] */ 65,101,-6, -8,56,-95, -61,-115,-37, 
  /* [6][0][][] */ 127,124,17, 91,21,-6, -57,-78,-105, 
  /* [6][1][][] */ -18,-24,-4, -29,-29,-6, -18,-22,65, 
  /* [6][2][][] */ -14,-38,-71, 26,-7,16, -8,14,79, 
  /* [7][0][][] */ 70,-1,31, 59,77,32, -16,73,-2, 
  /* [7][1][][] */ -54,31,-127, 59,-73,-50, 87,36,103, 
  /* [7][2][][] */ -84,-71,-104, 23,-79,-56, 102,20,9, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0025791435036808252, 0.0034871092066168785, 0.0027162155602127314, 0.0039112982340157032, 0.0042847851291298866, 0.0033228530082851648, 0.0032006476540118456, 0.0031489031389355659, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<4, int> tensor_dimension8 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant8_scale = { 1, { 0.018383584916591644, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,16,16,8 } };
const TfArray<1, float> quant9_scale = { 1, { 0.018383584916591644, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant10_scale = { 1, { 0.018536871299147606, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,8,8,16 } };
const TfArray<1, float> quant11_scale = { 1, { 0.018536871299147606, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,1024 } };
const TfArray<1, float> quant12_scale = { 1, { 0.018536871299147606, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,5 } };
const TfArray<1, float> quant13_scale = { 1, { 0.10164747387170792, } };
const TfArray<1, int> quant13_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,5 } };
const TfArray<1, float> quant14_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,7,6 } };
const TfArray<1, int> outputs0 = { 1, { 8 } };
const TfLitePoolParams opdata1 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs1 = { 1, { 8 } };
const TfArray<1, int> outputs1 = { 1, { 9 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 9,5,4 } };
const TfArray<1, int> outputs2 = { 1, { 10 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 10 } };
const TfArray<1, int> outputs3 = { 1, { 11 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 11,1 } };
const TfArray<1, int> outputs4 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata5 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs5 = { 3, { 12,3,2 } };
const TfArray<1, int> outputs5 = { 1, { 13 } };
const TfLiteSoftmaxParams opdata6 = { 1 };
const TfArray<1, int> inputs6 = { 1, { 13 } };
const TfArray<1, int> outputs6 = { 1, { 14 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8192), (TfLiteIntArray*)&g0::tensor_dimension0, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8192), (TfLiteIntArray*)&g0::tensor_dimension9, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4096), (TfLiteIntArray*)&g0::tensor_dimension11, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 1024, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1024), (TfLiteIntArray*)&g0::tensor_dimension13, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[7] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[7] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 15, };
const size_t tflNodes_subgraph_index[] = {0, 7, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  14, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_11_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 15;
  for (size_t i = 0; i < 15; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_11_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_11_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_11_invoke() {
  for (size_t i = 0; i < 7; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_11_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
